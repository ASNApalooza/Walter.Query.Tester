Using System
Using System.Text
Using System.Text.RegularExpressions

DclNamespace QueryTester

BegClass AVRXLate Access(*Public)

    DclFld LanguageType Type(*Integer4) 

    BegConstructor Access(*Public) 
        DclSrParm LanguageType Type(*Integer4) 

        *This.LanguageType = LanguageType 
    EndConstructor 

    BegSr SetLanguageType Access(*Public) 
        DclSrParm LanguageType Type(*Integer4) 
        
        *This.LanguageType = LanguageType                      
    EndSr

    BegFunc GetExampleCode Type(*String)
        DclSrParm Query Type(ASNA.Helpers.DataServices.QueryDriver) 
        DclSrParm sb    Type(StringBuilder) 

        sb.Replace('{library}', Query.Args.Inputs.Library)
        sb.Replace('{file}',Query.Args.Inputs.File)
        sb.Replace('{fieldsList}',Query.Args.Inputs.FieldsList)
        sb.Replace('{rows}',Query.Args.Inputs.Rows.ToString())
        sb.Replace('{query}',Query.Args.Inputs.Query.Trim())
        sb.Replace('{parms}', GetAvrQueryAndOrderByParms(Query))

        LeaveSr sb.ToString() 
    EndFunc 


    BegFunc  ToDataTableCode Type(*String) Access(*Public) 
        DclSrParm Query Type(ASNA.Helpers.DataServices.QueryDriver) 

        DclFld sb Type(StringBuilder) New()

        If (LanguageType = 0)
            sb.Append(Resources.AVRToDataTable) 
        Else
            sb.Append(Resources.CSToDataTable) 
        EndIf 
        LeaveSr GetExampleCode(Query,sb) 
    EndFunc             

    BegFunc  ToJsonCode Type(*String) Access(*Public) 
        DclSrParm Query Type(ASNA.Helpers.DataServices.QueryDriver) 

        DclFld sb Type(StringBuilder) New()

        If (LanguageType = 0)
            sb.Append(Resources.AVRToJson) 
        Else
            sb.Append(Resources.CSToJson) 
        EndIf 
        LeaveSr GetExampleCode(Query,sb) 
    EndFunc             

    BegFunc  ToExcelCode Type(*String) Access(*Public) 
        DclSrParm Query Type(ASNA.Helpers.DataServices.QueryDriver) 

        DclFld sb Type(StringBuilder) New()

        If (LanguageType = 0)
            sb.Append(Resources.AVRToExcel) 
        Else
            sb.Append(Resources.CSToExcel) 
        EndIf 
        LeaveSr GetExampleCode(Query,sb) 
    EndFunc             

    BegFunc  ToListItemCode Type(*String) Access(*Public) 
        DclSrParm Query Type(ASNA.Helpers.DataServices.QueryDriver) 

        DclFld sb Type(StringBuilder) New()

        If (LanguageType = 0)
            sb.Append(Resources.AVRToListItemArray) 
        Else
            sb.Append(Resources.CSToListItemArray) 
        EndIf 
        LeaveSr GetExampleCode(Query,sb) 
    EndFunc             

    BegFunc GetAvrQueryAndOrderByParms Type(*String) 
        DclSrParm Query Type(ASNA.Helpers.DataServices.QueryDriver) 
        DclFld sb Type(StringBuilder) New()
        
        DclFld QueryParmsMask Type(*String) 
        DclFld OrderByMask    Type(*String) 
        DclFld Mask           Type(*String) 
        
        QueryParmsMask = 'Query.Args.Inputs.QueryParms.Add(*New ASNA.Helpers.DataServices.QueryField("{field}",{value}))'
        OrderByMask    = 'Query.Args.Inputs.OrderBy.Add(*New ASNA.Helpers.DataServices.QueryOrderByField("{field}",{value}))'

        ForEach qf Type(ASNA.Helpers.DataServices.QueryField) Collection(Query.Args.Inputs.QueryParms) 
            Mask = QueryParmsMask
            Mask = Mask.Replace("{field}", qf.FieldName) 

            If (Regex.Match(qf.FieldValue.ToString().Trim(),"^\d*$").Success)
                Mask = Mask.Replace("{value}", qf.FieldValue.ToString().Trim()) 
            Else 
                Mask = Mask.Replace("{value}", '"' + qf.FieldValue.ToString().Trim() + '"' )
            EndIf

            If (LanguageType = 1)
                Mask = Mask + ";"
            EndIf
            sb.Append(Mask) 
            sb.AppendLine("")
        EndFor 

        ForEach qo Type(ASNA.Helpers.DataServices.QueryOrderByField) Collection(Query.Args.Inputs.OrderBy) 
            Mask = OrderByMask
            Mask = Mask.Replace("{field}", qo.FieldName) 

            Mask = Mask.Replace("{value}", qo.SortOrder.ToString()) 

            If (LanguageType = 1)
                Mask = Mask + ";"
            EndIf
            sb.AppendLine(Mask) 
        EndFor 

        LeaveSr sb.ToString() 
    EndFunc
    
EndClass
