<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AVRToDataTable" xml:space="preserve">
    <value>Using ASNA.DataGate.Client

...

DclConst DBNAME   Value("*Public/Cypress")

DclFld db         Type(ASNA.DataGate.Client.AdgConnection)        
DclFld Query      Type(ASNA.Helpers.DataServices.QueryDriver)
DclFld dt         Type(DataTable) 

db = *New AdgConnection(DBNAME) 

Query = *New ASNA.Helpers.DataServices.QueryDriver(db)
Query.Args.Inputs.Library      = "{library}"
Query.Args.Inputs.File         = "{file}"
Query.Args.Inputs.FieldsList   = "{fieldsList}"
Query.Args.Inputs.Rows         = {rows}
Query.Args.Inputs.Query        = "{query}"

{parms}
{options}
dt = Query.Exec() *As DataTable
// DataTable now available for databinding or other use. Generally you'll assign this 
// DataTable to a grid or some other control's DataSource property. 
If (Query.Args.Error.ErrorException &lt;&gt; *Nothing)
    // Work with exception here
EndIf 
db.Close()</value>
  </data>
  <data name="AVRToExcelWeb" xml:space="preserve">
    <value>Using ASNA.DataGate.Client

...

DclConst DBNAME     Value("*Public/Cypress")
DclConst EXCEL_FILE Value("C:\spreadsheets\customers.xlsx")

DclFld db           Type(ASNA.DataGate.Client.AdgConnection)        
DclFld Query        Type(ASNA.Helpers.DataServices.QueryDriver)
DclFld dt           Type(DataTable) 
DclFld ExcelAdapter Type(ASNA.Helpers.DataServices.ToExcelAdapter)
DclFLd Excel        Type(ASNA.Helpers.ASPNET.ExcelExport) New()
DclFld Result       Type(*Boolean)

db = *New AdgConnection(DBNAME) 

Query = *New ASNA.Helpers.DataServices.QueryDriver(db)
Query.Args.Inputs.Library      = "{library}"
Query.Args.Inputs.File         = "{file}"
Query.Args.Inputs.FieldsList   = "{fieldsList}"
Query.Args.Inputs.Rows         = {rows}
Query.Args.Inputs.Query        = "{query}"

ExcelAdapter = *New ASNA.Helpers.DataServices.ToExcelAdapter(Query.Args)
Query.OverrideAdapter(ExcelAdapter)
Query.Args.Inputs.Options.Add("heading","Customer Listing")
Query.Args.Inputs.Options.Add("worksheet_name","Customers")

{parms}
{options}
Result = Excel.CreateSpreadsheet(HttpContext.Current,Inputs) 
If (Result) 
    // Spreadsheet creation was successful.
Else 
    // Spreadsheet creation failed.
EndIf</value>
  </data>
  <data name="AVRToExcelWindows" xml:space="preserve">
    <value>Using ASNA.DataGate.Client

...

DclConst DBNAME     Value("*Public/Cypress")
DclConst EXCEL_FILE Value("C:\spreadsheets\customers.xlsx")

DclFld db           Type(ASNA.DataGate.Client.AdgConnection)        
DclFld Query        Type(ASNA.Helpers.DataServices.QueryDriver)
DclFld dt           Type(DataTable) 
DclFld ExcelAdapter Type(ASNA.Helpers.DataServices.ToExcelAdapter)

db = *New AdgConnection(DBNAME) 

Query = *New ASNA.Helpers.DataServices.QueryDriver(db)
Query.Args.Inputs.Library      = "{library}"
Query.Args.Inputs.File         = "{file}"
Query.Args.Inputs.FieldsList   = "{fieldsList}"
Query.Args.Inputs.Rows         = {rows}
Query.Args.Inputs.Query        = "{query}"

ExcelAdapter = *New ASNA.Helpers.DataServices.ToExcelAdapter(Query.Args)
Query.OverrideAdapter(ExcelAdapter)
Query.Args.Inputs.Options.Add("heading","Customer Listing")
Query.Args.Inputs.Options.Add("worksheet_name","Customers")

{parms}
{options}
Query.Exec() 
// Excel spreadsheet is now available in the Query object. In a Windows app
// you'll probably use the ToExcelAdapter's SaveToLocalFile() method to save 
// save the spreadsheeet.
If (Query.Args.Error.ErrorException &lt;&gt; *Nothing)
    // Work with exception here
EndIf 
ExcelAdapter.SaveToLocalFile(EXCEL_FILE)
db.Close()</value>
  </data>
  <data name="AVRToJson" xml:space="preserve">
    <value>Using ASNA.DataGate.Client

...

DclConst DBNAME   Value("*Public/Cypress")

DclFld db         Type(ASNA.DataGate.Client.AdgConnection)        
DclFld Query      Type(ASNA.Helpers.DataServices.QueryDriver)
DclFld dt         Type(DataTable) 
DclFld Json       Type(*String) 

db = *New AdgConnection(DBNAME) 

Query = *New ASNA.Helpers.DataServices.QueryDriver(db)
Query.Args.Inputs.Library      = "{library}"
Query.Args.Inputs.File         = "{file}"
Query.Args.Inputs.FieldsList   = "{fieldsList}"
Query.Args.Inputs.Rows         = {rows}
Query.Args.Inputs.Query        = "{query}"

Query.OverrideAdapter(*New ASNA.Helpers.DataServices.ToJsonAdapter(Query.Args)) 

{parms}
{options}
Json = Query.Exec() *As *String
// The Json data is now available. Generally you'll emit this data in a Web 
// app for JavaScript use.
If (Query.Args.Error.ErrorException &lt;&gt; *Nothing)
    // Work with exception here
EndIf 
db.Close()</value>
  </data>
  <data name="AVRToListItemArray" xml:space="preserve">
    <value>Using ASNA.DataGate.Client
Using System.Web 

...

DclConst DBNAME     Value("*Public/Cypress")

DclFld db           Type(ASNA.DataGate.Client.AdgConnection)        
DclFld Query        Type(ASNA.Helpers.DataServices.QueryDriver)
DclFld dt           Type(DataTable) 
DclArray ListItems  Type(System.Web.UI.WebControls.ListItem) Rank(1)

db = *New AdgConnection(DBNAME) 

Query = *New ASNA.Helpers.DataServices.QueryDriver(db)
Query.Args.Inputs.Library      = "{library}"
Query.Args.Inputs.File         = "{file}"
Query.Args.Inputs.FieldsList   = "{fieldsList}"
Query.Args.Inputs.Rows         = {rows}
Query.Args.Inputs.Query        = "{query}"
Query.OverrideAdapter(*New ASNA.Helpers.DataServices.ToLisItemArrayAdapter(Query.Args))

{parms}
{options}
ListItems = Query.Exec() *As As System.Web.UI.WebControls.ListItem[]
// The array of ListItems is now available. Generally you'll use a ComboBox 
// or DropDownList's AddRange() method to assign this array.
If (Query.Args.Error.ErrorException &lt;&gt; *Nothing)
    // Work with exception here
EndIf 
db.Close()</value>
  </data>
  <data name="CSToDataTable" xml:space="preserve">
    <value>using ASNA.DataGate.Client;

...

string const DBNAME value(@"*Public/Cypress");

ASNA.DataGate.Client.AdgConnection db;
ASNA.Helpers.DataServices.QueryDriver Query;
DataTable dt;

db = new AdgConnection(DBNAME); 

Query = *New ASNA.Helpers.DataServices.QueryDriver(db);
Query.Args.Inputs.Library      = "{library}";
Query.Args.Inputs.File         = "{file}";
Query.Args.Inputs.FieldsList   = "{fieldsList}";
Query.Args.Inputs.Rows         = {rows};
Query.Args.Inputs.Query        = "{query}";

{parms}
{options}
dt = Query.Exec() *As DataTable;
// DataTable now available for databinding or other use. Generally you'll assign this 
// DataTable to a grid or some other control's DataSource property. 
if (Query.Args.Error.ErrorException != null) {
    // Work with exception here
}
db.Close();</value>
  </data>
  <data name="CSToExcelWeb" xml:space="preserve">
    <value>using ASNA.DataGate.Client;

...

string const DBNAME value(@"*Public/Cypress");
strong const EXCEL_FILE Value(@"C:\spreadsheets\customers.xlsx");

ASNA.DataGate.Client.AdgConnection db;
ASNA.Helpers.DataServices.QueryDriver Query;
DataTable dt;
ASNA.Helpers.DataServices.ToExcelAdapter ExcelAdapter;
ASNA.Helpers.ASPNET.ExcelExport Excel = new ASNA.Helpers.ASPNET.ExcelExport Excel();
bool Result;

db = new AdgConnection(DBNAME); 

Query = *New ASNA.Helpers.DataServices.QueryDriver(db);
Query.Args.Inputs.Library      = "{library}";
Query.Args.Inputs.File         = "{file}";
Query.Args.Inputs.FieldsList   = "{fieldsList}";
Query.Args.Inputs.Rows         = {rows};
Query.Args.Inputs.Query        = "{query}";

ExcelAdapter = new ASNA.Helpers.DataServices.ToExcelAdapter(Query.Args);
Query.OverrideAdapter(ExcelAdapter);
Query.Args.Inputs.Options.Add("heading","Customer Listing");
Query.Args.Inputs.Options.Add("worksheet_name","Customers");

{parms}
{options}
Result = Excel.CreateSpreadsheet(HttpContext.Current,Inputs);
if (Result) {
    // Spreadsheet creation was successful.
}
else {
    // Spreadsheet creation failed.
}</value>
  </data>
  <data name="CSToExcelWindows" xml:space="preserve">
    <value>using ASNA.DataGate.Client;

...

string const DBNAME value(@"*Public/Cypress");
strong const EXCEL_FILE Value(@"C:\spreadsheets\customers.xlsx");

ASNA.DataGate.Client.AdgConnection db;
ASNA.Helpers.DataServices.QueryDriver Query;
DataTable dt;
ASNA.Helpers.DataServices.ToExcelAdapter ExcelAdapter;

db = new AdgConnection(DBNAME); 

Query = *New ASNA.Helpers.DataServices.QueryDriver(db);
Query.Args.Inputs.Library      = "{library}";
Query.Args.Inputs.File         = "{file}";
Query.Args.Inputs.FieldsList   = "{fieldsList}";
Query.Args.Inputs.Rows         = {rows};
Query.Args.Inputs.Query        = "{query}";

ExcelAdapter = new ASNA.Helpers.DataServices.ToExcelAdapter(Query.Args);
Query.OverrideAdapter(ExcelAdapter);
Query.Args.Inputs.Options.Add("heading","Customer Listing");
Query.Args.Inputs.Options.Add("worksheet_name","Customers");

{parms}
{options}
dt = Query.Exec() *As DataTable;
// Excel spreadsheet is now available in the Query object. In a Windows you'll
// probably use the ToExcelAdapter's SaveToLocalFile() method to save 
// save the spreadsheeet.
if (Query.Args.Error.ErrorException != null) {
    // Work with exception here
}
ExcelAdapter.SaveToLocalFile(EXCEL_FILE);
db.Close();</value>
  </data>
  <data name="CSToJson" xml:space="preserve">
    <value>using ASNA.DataGate.Client;

...

string const DBNAME value(@"*Public/Cypress");

ASNA.DataGate.Client.AdgConnection db;
ASNA.Helpers.DataServices.QueryDriver Query;
DataTable dt;
string Json;

db = new AdgConnection(DBNAME); 

Query = *New ASNA.Helpers.DataServices.QueryDriver(db);
Query.Args.Inputs.Library      = "{library}";
Query.Args.Inputs.File         = "{file}";
Query.Args.Inputs.FieldsList   = "{fieldsList}";
Query.Args.Inputs.Rows         = {rows};
Query.Args.Inputs.Query        = "{query}";

Query.OverrideAdapter(new ASNA.Helpers.DataServices.ToJsonAdapter(Query.Args)); 

{parms}
{options}
dt = Query.Exec() *As DataTable;
// The Json data is now available. Generally you'll emit this data in a Web 
// app for JavaScript use.
if (Query.Args.Error.ErrorException != null) {
    // Work with exception here
}
db.Close();</value>
  </data>
  <data name="CSToListItemArray" xml:space="preserve">
    <value>using ASNA.DataGate.Client;
using System.Web;

...

string const DBNAME value(@"*Public/Cypress");

ASNA.DataGate.Client.AdgConnection db;
ASNA.Helpers.DataServices.QueryDriver Query;
DataTable dt;
System.Web.UI.WebControls.ListItem[] ListItems;

db = new AdgConnection(DBNAME); 

Query = *New ASNA.Helpers.DataServices.QueryDriver(db);
Query.Args.Inputs.Library      = "{library}";
Query.Args.Inputs.File         = "{file}";
Query.Args.Inputs.FieldsList   = "{fieldsList}";
Query.Args.Inputs.Rows         = {rows};
Query.Args.Inputs.Query        = "{query}";
Query.OverrideAdapter(new ASNA.Helpers.DataServices.ToLisItemArrayAdapter(Query.Args));

{parms}
{options}
dt = (System.Web.UI.WebControls.ListItem[])Query.Exec();
// DataTable now available for databinding or other use. Generally you'll assign this 
// DataTable to a grid's or some other control's DataSource property. 
if (Query.Args.Error.ErrorException != null) {
    // Work with exception here
}
db.Close();</value>
  </data>
  <data name="JSToDataTable" xml:space="preserve">
    <value>You can only generate Json with JavaScript. Click the "ToJson" tab to see an example.</value>
  </data>
  <data name="JSToJson" xml:space="preserve">
    <value>You can do lots with Walter's Json output. This exmaple shows _all_of the code you need 
to provide to hookup a jQuery UI autocomplete with Walter. There is _no_ other JavaScript you need
to write!

$(function () {
    var ACCustomerName = new ASNAHelpers.QueryInputArgs();
    ACCustomerName.url = "../services/jsonservice.ashx";
    ACCustomerName.Library = "examples";
    ACCustomerName.File = "cmastnewl2";
    ACCustomerName.FieldsList = "cmname:label,cmcustno:value";
    ACCustomerName.Rows = 12;
    ACCustomerName.Query = "CMNAME &gt;= '{CMNAME}'";
    ACCustomerName.addQueryParm("CMNAME");
    ACCustomerName.addOption("labelTargetId", "textboxCustomerName");
    ACCustomerName.addOption("labelValueId", "textboxCustomerNumber");
    ACCustomerName.addOption("showLabelOnScroll", true);
    ASNAHelpers.autoComplete.registerQuery(ACCustomerName);
});</value>
  </data>
</root>